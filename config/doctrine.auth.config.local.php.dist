<?php

use FwsDoctrineAuth\Entity\BaseUsers;
use Laminas\Session\Validator as SessionValidator;
use Laminas\Session\Storage\SessionArrayStorage;
use FwsDoctrineAuth\Form;

return [
    'doctrine' => [
        /**
         * Configure doctrine connection, you may have this defined elsewhere
         */
        'connection' => [
            'orm_default' => [
                'driverClass' => 'Doctrine\DBAL\Driver\PDOMySql\Driver',
                'params' => [
                    'host' => 'localhost',
                    'port' => '3306',
                    'dbname' => 'your_database',
                    'user' => 'your_db_user',
                    'password' => 'your_password',
                ],
            ],
        ],
        /**
         * Configure doctrine authentication
         */
        'authentication' => [
            'orm_default' => [
                'identity_class' => BaseUsers::class, // <- Doctrine entity to use, default \FwsDoctrineAuth\Entity\BaseUsers
                'identity_property' => 'emailAddress', // <- email address, username etc.
                'credential_property' => 'password',
            ],
        ],
    ],
    'doctrineAuth' => [
        'siteName' => 'Example Site', // the name of your website
<<<<<<< Updated upstream
=======
        'siteCoutryCode' => 'GB', // 2 character ISO 3166 Country Code
        'sendEmails' => true, // <- Send emails if true or create email file if false. Handy if development server is not setup to send emails. Remember to set true on production server
        'emailsFolder' => 'emails', // <- Location to store email files relative to your application root, only used if the above is set to false, remember to create folder(s)
        /**
         * Encryption
         */
        'encryptData' => false, // Encrypt user data, default = false
        'rsaPrivateKeyFile' => 'rsa/id_rsa.pem', // <- path and filename of your rsa private key @see https://docs.rightscale.com/faq/How_Do_I_Generate_My_Own_SSH_Key_Pair.html
        'rsaPublicKeyFile' => 'rsa/id_rsa.pub', // <- path and filename of your rsa public key
        'rsaKeyPassphrase' => 'passphrase', // passphrase used when creating the above keys
>>>>>>> Stashed changes
        /**
         * Forms
         * Registration Form
         */
        'registrationForm' => Form\RegisterForm::class,
        'allowRegistration' => true, // <- allow new users to register
        'registrationCallback' => '', // <- class to use as callback in registration, must use __invoke() magic method
        'autoRegistrationLogin' => false, // <- Auto login after registration
        'userActiveAfterRegistration' => 1, // <- user active after registration, 1 = active, 0 = inactive
        /**
         * Login Form & password reset
         */
        'loginForm' => Form\LoginForm::class,
        'loginCallback' => null, // <- class to use as callback during login, must use __invoke() magic method
        /**
         * Password reset forms
         */
        'emailResetLinkForm' => Form\EmailForm::class,
        'newPasswordForm' => Form\ResetPasswordForm::class,
        'allowPasswordReset' => true, // Show reset password link on login form and allow password reset
        'passwordLinkActiveFor' => 24, // Password reset link active for hours
        'fromEmail' => 'no-reply@example.com', // Email address for password reset link email, set reply to and from email
        
        'formElements' => [
                'identity_label' => 'Email Address', // <- Form label for identity_property
                'credential_label' => 'Password', // <- Form label for credential_property
        ],
    ],
    /**
     * Configure laminas-session as per your requirements
     */
    'session_manager' => [
        'validators' => [
            SessionValidator\RemoteAddr::class,
            SessionValidator\HttpUserAgent::class,
        ],
    ],
    'session_storage' => [
        'type' => SessionArrayStorage::class
    ],
    'session_config' => [
        'cookie_lifetime' => 60 * 60 * 1,// <- Session cookie will expire in 1 hour.
        'gc_maxlifetime' => 60 * 60 * 24 * 30,// <- Session data will be stored on server maximum for 30 days.
    ],
];